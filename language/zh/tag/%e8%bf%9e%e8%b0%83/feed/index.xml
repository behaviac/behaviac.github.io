<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>连调 &#8211; behaviac</title>
	<atom:link href="/language/zh/tag/%E8%BF%9E%E8%B0%83/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Tencent behaviac, Game AI, Behavior Tree, Finite State Machine, Hierarchical Task Network, BT FSM HTN, 腾讯开源, 游戏AI, 行为树,有限状态机,分层任务网络</description>
	<lastBuildDate>Fri, 17 Mar 2017 02:57:37 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.4.1</generator>
	<item>
		<title>优化及性能</title>
		<link>/performence/</link>
					<comments>/performence/#comments</comments>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Fri, 13 May 2016 02:39:39 +0000</pubDate>
				<category><![CDATA[文章]]></category>
		<category><![CDATA[连调]]></category>
		<category><![CDATA[优化]]></category>
		<category><![CDATA[编译构建]]></category>
		<category><![CDATA[运行时]]></category>
		<guid isPermaLink="false">/?p=300</guid>

					<description><![CDATA[优化及性能 宏BEHAVIAC_RELEASE定义的时候是最终版，BEHAVIAC_RELEASE没有定义的时候是为开发版。 在debug版中，BEHAVIAC<a class="moretag" href="/performence/">Read More...</a>]]></description>
										<content:encoded><![CDATA[<h2 id="section">优化及性能</h2>
<p>宏BEHAVIAC_RELEASE定义的时候是最终版，BEHAVIAC_RELEASE没有定义的时候是为开发版。</p>
<ul>
<li>在debug版中，BEHAVIAC_RELEASE缺省下没有定义的。诸如logging、socketing、热加载等开发功能是有效的。可以通过behaviac::Config::IsLogging和behaviac::Config::IsSocketing来控制是否要Log到文件或是否与编辑器的连接。</li>
<li>在release版中，BEHAVIAC_RELEASE缺省是有定义的。诸如logging、socketing、热加载等开发功能都是没有定义的。</li>
</ul>
<div class="note info">
<h5>BEHAVIAC_RELEASE缺省下是否定义的说明</h5>
</div>
<p>BEHAVIAC_RELEASE缺省下是否定义可以参考文章《<a href="/language/zh/build/">构建说明</a>》。</p>
<p>简单来说对于Cpp，当使用CMake的时候，BEHAVIAC_VERSION_MODE用来控制BEHAVIAC_RELEASE是否定义：</p>
<ol>
<li>Default：缺省模式是Debug下BEHAVIAC_RELEASE没有定义，而Release下BEHAVIAC_RELEASE有定义</li>
<li>ForceUseDev：强制不定义BEHAVIAC_RELEASE</li>
<li>ForceUseRelease：强制定义BEHAVIAC_RELEASE</li>
</ol>
<p>而当BEHAVIAC_RELEASE有定义的最终版里，logging和socketing是关闭的，也不支持连接编辑器。</p>
<p>具体可以参考文章《<a href="/language/zh/config/">开发功能开关</a>》。</p>
<p>总之，针对效率可以有下述选择：</p>
<ol>
<li>定义BEHAVIAC_RELEASE，从而不编译诸如logging、socketing、热加载等开发功能，提供最高效率，也不支持连调功能。
<ul>
<li>C++下，在_config.h中定义BEHAVIAC_RELEASE为1</li>
<li>C#下，在Assets目录下的smcs.rsp文件中，定义BEHAVIAC_RELEASE</li>
<li>如果想选择打开或关闭调试功能而不是完全的关闭，则不需要修改任何关于BEHAVIAC_RELEASE的定义，通过behaviac::Config::SetLogging和behaviac::Config::SetSocketing来控制是否打开logging和socketing。</li>
</ul>
</li>
<li>不使用xml或bson格式，而是使用C++或C#格式
<ul>
<li>C#下，还需要那些在行为树中使用到的Agent的成员都是public的（非public的成员即使通过C#代码访问也需要使用反射系统来进行，会导致GC Alloc以及性能损失）。</li>
</ul>
</li>
</ol>
<div class="note info">
<h5>overhead</h5>
</div>
<p>behaviac可以导出xml(bson)，或者源码（cpp/c#），源码的效率要优于数据（xml/bson）的执行效率。实际上这里的效率都是指的behaviac本身的overhead，如果提供的<code class="highlighter-rouge">方法</code>本身效率很低，运行很慢，behaviac本身的overhead就可以忽略不计了，无论是选用导出何种格式都遇事无补，这个时候，最需要解决的是优化方法的执行效率。</p>
<p><img src="/img/references/overhead.png" alt="overhead" /><br />
如上图，尽管xml格式是cpp格式的大约2倍，但这个overhead实际上是非常小的，只有0.0000269秒，0.0269毫秒。（具体数据会因为测试环境的不同有差异）。</p>
]]></content:encoded>
					
					<wfw:commentRss>/performence/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>调试功能的说明</title>
		<link>/debugging_desc/</link>
					<comments>/debugging_desc/#comments</comments>
		
		<dc:creator><![CDATA[jonygli]]></dc:creator>
		<pubDate>Fri, 17 Jun 2016 07:50:54 +0000</pubDate>
				<category><![CDATA[文章]]></category>
		<category><![CDATA[连调]]></category>
		<guid isPermaLink="false">/?p=622</guid>

					<description><![CDATA[behaviac提供了离线调试以及连调功能。 离线调试 离线调试功能是指在编辑器里加载运行时产生的_behaviac_$_.log文件，如下图，可以加载_beh<a class="moretag" href="/debugging_desc/">Read More...</a>]]></description>
										<content:encoded><![CDATA[<p>behaviac提供了离线调试以及连调功能。</p>
<h2>离线调试</h2>
<p>离线调试功能是指在编辑器里加载运行时产生的_behaviac_$_.log文件，如下图，可以加载_behaviac_$_.log文件：</p>
<p><img class="alignnone size-medium wp-image-625" src="/wp-content/uploads/2016/06/offline-300x194.png" alt="offline" width="300" height="194" srcset="/wp-content/uploads/2016/06/offline-300x194.png 300w, /wp-content/uploads/2016/06/offline.png 328w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>_behaviac_$_.log是运行游戏时产生的log文件。一般都是产生在exe所在的目录，对于Unity，是产生在Assets的同级目录。</p>
<p><img class="alignnone size-medium wp-image-626" src="/wp-content/uploads/2016/06/off-300x225.png" alt="off" width="300" height="225" srcset="/wp-content/uploads/2016/06/off-300x225.png 300w, /wp-content/uploads/2016/06/off-768x576.png 768w, /wp-content/uploads/2016/06/off.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>在离线调试里，可以模拟游戏的运行，甚至可以设断点，然后查看变量的当前值，可以查看树的执行情况。</p>
<p>文件_behaviac_$_.log只在开发版本下产生，或者是Config::IsLogging为true时产生。</p>
<p>可以参考：<a href="/language/zh/tutorial10_performence/">优化与性能</a>和<a href="/language/zh/config/">开发功能开关</a>。</p>
<h2>连调</h2>
<p>连调功能是指在游戏运行的时候，编辑器可以连上游戏，实时的查看树的运行情况，变量的当前值，可以设断点等。而离线调试实际上是回放运行时产生的log。</p>
<p>和上面离线调试时需要在开发版本下一样，连调同样需要游戏是开发版本，发布版本下没有连调的功能。可以参考：<a href="/language/zh/tutorial10_performence/">版本说明</a>和<a href="/language/zh/config/">开发功能开关</a>。</p>
<p>除此之外，还需要下面的事项：</p>
<ol>
<li>请检查Agent::SetIdMask 和 Agent::SetIdFlag的调用是否合适。IdFlag和IdMask都是int，IdMask是个公用的Mask，而IdFlag是设置给某个Agent实例的，当(IdFlag &amp; IdMask)!= 0的时候，该Agent才被调试。</li>
<li>请确保游戏确实在更新，具体可以参考<a href="/docs/zh/tutorials/tutorial13_updateloop/" target="_blank" rel="nofollow">更新流程</a>。Workspace::DebugUpdate需要被调用，如果只是调用Agent::btexec来更新，则连调功能不能正常工作。</li>
</ol>
<p>有问题可以参考<a href="http://bbs.behaviac.com/index.php/tag/%E8%BF%9E%E8%B0%83">连调相关常见问题</a></p>
]]></content:encoded>
					
					<wfw:commentRss>/debugging_desc/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>开发功能开关</title>
		<link>/config/</link>
					<comments>/config/#comments</comments>
		
		<dc:creator><![CDATA[jonygli]]></dc:creator>
		<pubDate>Mon, 11 Apr 2016 09:57:37 +0000</pubDate>
				<category><![CDATA[文章]]></category>
		<category><![CDATA[连调]]></category>
		<category><![CDATA[概述]]></category>
		<category><![CDATA[编译构建]]></category>
		<guid isPermaLink="false">/?p=160</guid>

					<description><![CDATA[behaviac的运行时提供有核心的更新行为树的功能，在其之上，还有logging，热加载，连调等调试功能。这些调试功能只是‘开发’功能，在游戏发布后实际上是不<a class="moretag" href="/config/">Read More...</a>]]></description>
										<content:encoded><![CDATA[<p>behaviac的运行时提供有核心的更新行为树的功能，在其之上，还有logging，热加载，连调等调试功能。这些调试功能只是‘开发’功能，在游戏发布后实际上是不需要的。</p>
<p>除了可以在<code>config.h</code>中定义<code>BEHAVIAC_RELEASE</code>宏为1来完全使‘开发功能’不被编译外。也可以保留这些‘开发’功能但只是使用下面所列的‘开关’来关闭或者打开某些功能。</p>
<p>具体可以参考<a href="/language/zh/tutorial10_performence/">优化及性能</a></p>
<h2>Cpp</h2>
<pre class="brush: cpp; title: ; notranslate">namespace behaviac
{
class BEHAVIAC_API Config
{
public:
static bool IsProfiling();
static void SetProfiling(bool bEnabled);

//logging是否打开
static bool IsLogging();
static void SetLogging(bool bLogging);

//logging打开的情况下，是否每次logging的时候都Flush
static bool IsLoggingFlush();
static void SetLoggingFlush(bool bFlush);

//socket连接是否打开，只有打开socket连接，连调功能才会支持
static bool IsSocketing();
static void SetSocketing(bool bSocketing);

//是否是阻塞模式，当时阻塞模式的时候，游戏会阻塞，等待编辑器的连接，
//只有成功建立连接后，游戏才继续运行
static bool IsSocketBlocking();
static void SetSocketBlocking(bool bBlocking);

//游戏和编辑器建立连接的时候使用的端口
static void SetSocketPort(unsigned short port);
static unsigned short GetSocketPort();

//热加载是否打开
static bool IsHotReload();
static void SetHotReload(bool bHotReload);
};</pre>
<p>具体的代码可以查看<a href="{{site.repository}}/blob/master/inc/behaviac/base/workspace.h">behaviac/base/workspace.h</a></p>
<h2>Unity</h2>
<p>C#下同名函数的意义和Cpp一样，此外，<code>IsSuppressingNonPublicWarning</code>是个用来控制是否输出非public成员的警告。</p>
<p>当<code>IsSuppressingNonPublicWarning</code>为true的时候，Agent的成员（field，method，property）如果不是public的，则输出警告信息，从而可以修改其为public，这样的话，当使用导出格式为c#时其效率就是最高的，而且没有GC Alloc。</p>
<p>具体的代码请查看<a href="{{site.repository}}/blob/master/integration/unity/Assets/Scripts/behaviac/runtime/Workspace.cs">behaviac/runtime/workspace.cs</a></p>
]]></content:encoded>
					
					<wfw:commentRss>/config/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
	</channel>
</rss>
