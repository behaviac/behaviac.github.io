<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>教程 &#8211; behaviac</title>
	<atom:link href="./../../%E6%95%99%E7%A8%8B/feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../../../../index.html</link>
	<description>Tencent behaviac, Game AI, Behavior Tree, Finite State Machine, Hierarchical Task Network, BT FSM HTN, 腾讯开源, 游戏AI, 行为树,有限状态机,分层任务网络</description>
	<lastBuildDate>Thu, 29 Jun 2017 10:52:26 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.4.1</generator>

<image>
	<url>./../../../../../wp-content/uploads/2016/04/cropped-256x256-32x32.png</url>
	<title>教程 &#8211; behaviac</title>
	<link>./../../../../../index.html</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>教程1：Hello Behaviac</title>
		<link>./../../../../../tutorial_1_hello_behaviac/index.html</link>
					<comments>./../../../../../tutorial_1_hello_behaviac/index.html#comments</comments>
		
		<dc:creator><![CDATA[cainhuang]]></dc:creator>
		<pubDate>Tue, 20 Dec 2016 02:36:53 +0000</pubDate>
				<category><![CDATA[教程]]></category>
		<guid isPermaLink="false">./../../../../../index.html?p=1315</guid>

					<description><![CDATA[还未查看过文档《原理和流程》的请首先阅读该文档，以便了解behaviac组件的基本原理和工作流程。 本文档有视频和文字说明。两者内容是一致的，以便按需查看。 本<a class="moretag" href="./../../../../../tutorial_1_hello_behaviac/index.html">Read More...</a>]]></description>
										<content:encoded><![CDATA[<pre style="text-align: left;">还未查看过文档《<a href="./../../../../../workflow/index.html">原理和流程</a>》的请首先阅读该文档，以便了解behaviac组件的基本原理和工作流程。

本文档有视频和文字说明。两者内容是一致的，以便按需查看。
本文档描述的是3.6及以后版本。对于3.5及以前的老版本请参考分类“3.5”。</pre>
<h2><span class="ez-toc-section" id="i">编辑器的使用</span></h2>
<h3><span class="ez-toc-section" id="i-2">新建工作区</span></h3>
<p>工作区用于管理整个项目的配置，包括一些位置和语言等参数。</p>
<h4><span class="ez-toc-section" id="i-3">视频</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_1_0.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p>打开编辑器，点击菜单项“文件”-&gt;“新建工作区”，弹出新建工作区窗口，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1569" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_workspace.png" alt="" width="587" height="272" srcset="./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_workspace.png 587w, ./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_workspace-300x139.png 300w" sizes="(max-width: 587px) 100vw, 587px" /></p>
<ul>
<li><strong>工作区位置：</strong>保存工作区文件的目录，在该目录下会保存出*.workspace.xml的文件，该文件即是编辑器打开的工作区文件（或者称之为项目文件）。</li>
<li><strong>行为树源位置：</strong>对既有服务器，又有客户端的项目开发，可能需要共用行为树，这时候只要为服务器和客户端分别创建工作区，然后为它们设置相同的“行为树源位置”即可。这样，只需要编辑同一份行为树，就可以让服务器和客户端的AI逻辑保持一致。此外，源位置中还自动生成behaviac_meta文件夹，里面保存了跟工作区同名但后缀名为*.meta.xml的类型信息文件。</li>
<li><strong>行为树导出位置：</strong>在该目录下，导出编辑好的行为树，并且需要在程序端设置的加载位置，以便程序运行起来后，加载所需的行为树。</li>
<li><strong>代码生成位置：</strong>用于存放后面将要描述的类型信息浏览器中编辑好的类型代码文件，还包含了一些“胶水”代码文件，都需要整合到运行时（游戏端）一起编译构建。</li>
<li><strong>程序端开发语言：</strong>可选cpp（即C++）和cs（即C#）两种，表示程序端的代码语言。结合上面所说的情况，可以支持服务器和客户端采用不同的语言编写代码，但共用同一份行为树数据。</li>
</ul>
<pre>“胶水”代码：是指编辑器自动生成的代码文件，用于注册类型信息，并用于程序端执行时通过名字或ID调用类的成员属性或方法。</pre>
<p>点击确认后，就可以创建自己的工作区。创建完工作区之后，后续如果需要修改工作区中的参数，可以通过菜单项“文件”-&gt;“编辑工作区”，重新打开上图所示的窗口来修改相关的参数。</p>
<p>另外，还可以直接打开为本教程建好的工作区。点击菜单项“文件”-&gt;“打开工作区”，找到安装或源码包目录中的<a href="https://github.com/Tencent/behaviac/tree/master/tutorials/tutorial_1/workspace">tutorials/tutorial_1/workspace</a>文件夹，打开tutorial_1_cpp.workspace.xml文件，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1570" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_workspace.png" alt="" width="268" height="207" /></p>
<h3><span class="ez-toc-section" id="i-4">编辑类型信息</span></h3>
<p>为了让行为树可以描述某个Agent类型的行为，首先需要创建自己的Agent子类。</p>
<h4><span class="ez-toc-section" id="i-5">视频</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_1_1.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p>通过菜单项“视图”-&gt;“类型信息”（或快捷键Ctrl+M），打开类型信息浏览器，可以看到当前类型列表中只有一个默认生成的behaviac::Agent基类，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1338" src="./../../../../../wp-content/uploads/2016/12/empty_types.png" alt="empty_types" width="612" height="735" srcset="./../../../../../wp-content/uploads/2016/12/empty_types.png 612w, ./../../../../../wp-content/uploads/2016/12/empty_types-250x300.png 250w" sizes="(max-width: 612px) 100vw, 612px" /></p>
<p>点击右上角的“新增”按钮，弹出“新增类型”窗口，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1339" src="./../../../../../wp-content/uploads/2016/12/first_agent.png" alt="first_agent" width="370" height="270" srcset="./../../../../../wp-content/uploads/2016/12/first_agent.png 370w, ./../../../../../wp-content/uploads/2016/12/first_agent-300x219.png 300w" sizes="(max-width: 370px) 100vw, 370px" /></p>
<ul>
<li>将“类型”选择为“Agent”</li>
<li>将“名称”设置为“FirstAgent”</li>
<li>右上方的“生成代码?”默认是勾选上的，表示编辑器要自动生成该类型的代码文件，否则该类型代码需要手工编写</li>
<li>“生成位置”是生成该类型文件所在的文件夹，默认不用设置，表示默认生成在工作区中配置的“代码生成位置”里面</li>
</ul>
<p>点击“确定”按钮后，可以看到类型列表中有了“FirstAgent”这个类，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1340" src="./../../../../../wp-content/uploads/2016/12/first_agent_methods.png" alt="first_agent_methods" width="612" height="735" srcset="./../../../../../wp-content/uploads/2016/12/first_agent_methods.png 612w, ./../../../../../wp-content/uploads/2016/12/first_agent_methods-250x300.png 250w" sizes="(max-width: 612px) 100vw, 612px" /></p>
<p>选中该“FirstAgent”类，并设置中部的 “成员类型”为“Method”，可以看到目前该类有六个来自behaviac::Agent基类的成员方法，方法名前面的“~”表示该方法是从基类继承过来的，如上图所示。</p>
<p>点击右侧的“新增”按钮，弹出“新增方法”窗口，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1341" src="./../../../../../wp-content/uploads/2016/12/create_SayHello.png" alt="create_sayhello" width="562" height="343" srcset="./../../../../../wp-content/uploads/2016/12/create_SayHello.png 562w, ./../../../../../wp-content/uploads/2016/12/create_SayHello-300x183.png 300w" sizes="(max-width: 562px) 100vw, 562px" /></p>
<p>将新方法的“名字”设为“SayHello”，其他参数暂不用设置。</p>
<p>直接点击“确定”按钮，回到类型信息浏览器，可以看到“FirstAgent”类有了第一个自己添加的成员方法“SayHello”，其他几个带“~”的方法表示是从基类继承过来的成员方法，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1342" src="./../../../../../wp-content/uploads/2016/12/first_method-1.png" alt="first_method" width="612" height="735" srcset="./../../../../../wp-content/uploads/2016/12/first_method-1.png 612w, ./../../../../../wp-content/uploads/2016/12/first_method-1-250x300.png 250w" sizes="(max-width: 612px) 100vw, 612px" /></p>
<p>现在，我们有了第一个Agent子类的“FirstAgent”，以及它的成员方法“SayHello”。</p>
<p>点击右下方的“应用”按钮，自动生成类型和其他相关的“胶水”代码文件等。</p>
<p>点击左下方的“打开代码生成位置”按钮，可以查看生成的代码文件，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1318" src="./../../../../../wp-content/uploads/2016/12/generated_types.png" alt="generated_types" width="234" height="168" /></p>
<p>其中，behaviac_types.h需要包含到自己的代码中，以便使用自动生成的类型和“胶水”代码，如下代码所示：</p>
<pre>#include "behaviac_generated/types/behaviac_types.h"</pre>
<p>“internal”文件夹中包含了前面提及的类型和“胶水”代码，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1343" src="./../../../../../wp-content/uploads/2016/12/generated_internal-1.png" alt="generated_internal" width="269" height="267" srcset="./../../../../../wp-content/uploads/2016/12/generated_internal-1.png 269w, ./../../../../../wp-content/uploads/2016/12/generated_internal-1-150x150.png 150w" sizes="(max-width: 269px) 100vw, 269px" /></p>
<p>其中，behaviac_agent_member_visitor.h文件生成了用于访问类的私有属性和方法的“胶水”代码，behaviac_agent_meta.h/cpp文件生成了用于注册类及其属性、方法、实例等信息的“胶水”代码，这些“胶水”代码主要是为了程序端可以通过名字自动取用到类及其成员属性、方法及其实例等。</p>
<p>这些生成的代码需要添加到自己的项目中一起编译构建，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1344" src="./../../../../../wp-content/uploads/2016/12/include_project-1.png" alt="include_project" width="286" height="247" /></p>
<h3><span class="ez-toc-section" id="i-6">创建行为树</span></h3>
<p>有了上面创建的Agent子类“FirstAgent”后，就可以开始创建和编辑行为树了。</p>
<h4><span class="ez-toc-section" id="i-7">视频</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_1_2.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p>如果对编辑器的按键操作不熟悉，请通过菜单项“帮助”-&gt;“起始页”，查看按键说明，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1346" src="./../../../../../wp-content/uploads/2016/12/controls.png" alt="controls" width="646" height="612" srcset="./../../../../../wp-content/uploads/2016/12/controls.png 646w, ./../../../../../wp-content/uploads/2016/12/controls-300x284.png 300w" sizes="(max-width: 646px) 100vw, 646px" /></p>
<p>点击工具栏中的“新建行为树”按钮，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1347" src="./../../../../../wp-content/uploads/2016/12/new_bt-1.png" alt="new_bt" width="285" height="116" /></p>
<p>新建行为树后，将该行为树名字改为“FirstBT”，现在有了第一棵行为树，该树只有一个根节点，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1348" src="./../../../../../wp-content/uploads/2016/12/first_bt-1.png" alt="first_bt" width="599" height="290" srcset="./../../../../../wp-content/uploads/2016/12/first_bt-1.png 599w, ./../../../../../wp-content/uploads/2016/12/first_bt-1-300x145.png 300w" sizes="(max-width: 599px) 100vw, 599px" /></p>
<p>鼠标左键单击选中该根节点，为该节点的“Agent类型”设置为前面创建的“FirstAgent”，表示这棵行为树用来描述FirstAgent类的行为，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1198" src="./../../../../../wp-content/uploads/2016/12/agent_type.png" sizes="(max-width: 475px) 100vw, 475px" srcset="./../../../../../wp-content/uploads/2016/12/agent_type.png 475w, ./../../../../../wp-content/uploads/2016/12/agent_type-300x85.png 300w" alt="agent_type" width="475" height="135" /></p>
<p>设置完后，可以发现根节点已经具有类型“FirstAgent”，如下图所示：</p>
<div><img class="aligncenter size-full wp-image-1349" src="./../../../../../wp-content/uploads/2016/12/root_node.png" alt="root_node" width="602" height="297" srcset="./../../../../../wp-content/uploads/2016/12/root_node.png 602w, ./../../../../../wp-content/uploads/2016/12/root_node-300x148.png 300w" sizes="(max-width: 602px) 100vw, 602px" /></div>
<div></div>
<p>在左侧的节点列表中（如下图所示），用鼠标左键选中“动作”节点（或其他需要的节点）后，按住鼠标左键并拖拽该节点到右侧的主视口中，并将动作节点落在根节点右侧的黑色三角箭头处。</p>
<p><img class="aligncenter size-full wp-image-1199" src="./../../../../../wp-content/uploads/2016/12/node_tree.png" sizes="(max-width: 170px) 100vw, 170px" srcset="./../../../../../wp-content/uploads/2016/12/node_tree.png 170w, ./../../../../../wp-content/uploads/2016/12/node_tree-134x300.png 134w" alt="node_tree" width="170" height="381" /></p>
<p>拖拽完毕，可以看到行为树有了叶子节点“动作”，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1350" src="./../../../../../wp-content/uploads/2016/12/action_node.png" alt="action_node" width="874" height="294" srcset="./../../../../../wp-content/uploads/2016/12/action_node.png 874w, ./../../../../../wp-content/uploads/2016/12/action_node-300x101.png 300w, ./../../../../../wp-content/uploads/2016/12/action_node-768x258.png 768w" sizes="(max-width: 874px) 100vw, 874px" /></p>
<p>选中该动作节点，在右侧“动作的属性”窗口中，为其选择成员方法“SayHello”，并将另一参数“决定状态的选项”设置为“Success”，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1322" src="./../../../../../wp-content/uploads/2016/12/action_properties.png" alt="action_properties" width="476" height="102" srcset="./../../../../../wp-content/uploads/2016/12/action_properties.png 476w, ./../../../../../wp-content/uploads/2016/12/action_properties-300x64.png 300w" sizes="(max-width: 476px) 100vw, 476px" /></p>
<p>如果想了解动作节点的更多细节，请参考文档《<a href="./../../../action/index.html">动作节点</a>》。或者选中某个节点后，按F1键或右键菜单直接打开该节点的文档。</p>
<p>至此，我们得到了一棵最简单但是完整的行为树，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1351" src="./../../../../../wp-content/uploads/2016/12/first_bt_tree-1.png" alt="first_bt_tree" width="876" height="293" srcset="./../../../../../wp-content/uploads/2016/12/first_bt_tree-1.png 876w, ./../../../../../wp-content/uploads/2016/12/first_bt_tree-1-300x100.png 300w, ./../../../../../wp-content/uploads/2016/12/first_bt_tree-1-768x257.png 768w" sizes="(max-width: 876px) 100vw, 876px" /></p>
<h3><span class="ez-toc-section" id="i-8">导出行为树</span></h3>
<p>编辑完行为树后，需要导出全部行为树，以便程序端加载使用。</p>
<h4><span class="ez-toc-section" id="i-9">视频</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_1_3.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p>点击工具栏中的“导出全部”按钮，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1359" src="./../../../../../wp-content/uploads/2016/12/export_all-1.png" alt="export_all" width="285" height="113" /></p>
<p>弹出“导出”窗口，在导出格式中暂只用勾选“Xml”，点击右下方的“导出”按钮，如下图所示： <img class="aligncenter size-full wp-image-1323" src="./../../../../../wp-content/uploads/2016/12/export_bt.png" alt="export_bt" width="395" height="595" srcset="./../../../../../wp-content/uploads/2016/12/export_bt.png 395w, ./../../../../../wp-content/uploads/2016/12/export_bt-199x300.png 199w" sizes="(max-width: 395px) 100vw, 395px" /></p>
<p>导出后，打开工作区中指定的导出目录，可以看到成功导出了FirstBT.xml文件和meta文件夹中的tutorial_1_cpp.meta.xml文件，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1571" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_exported.png" alt="" width="284" height="165" /></p>
<p>导出的FirstBT.xml文件就是交给程序端加载使用的行为树，tutorial_1_cpp.meta.xml文件是交给程序端加载使用的含有类型和自定义成员属性信息的文件。</p>
<h2><span class="ez-toc-section" id="i-10">运行时的使用</span></h2>
<h3><span class="ez-toc-section" id="i-11">编写并运行程序</span></h3>
<p>需要整合behaviac运行时库到自己的项目中来一起编译构建和运行行为树。<strong>如何编译构建behaviac运行时库，请参考文档《<a href="./../../../how_to_build/index.html">如何编译构建</a>》。</strong></p>
<h4><span class="ez-toc-section" id="C">C++版</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_2.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p style="text-align: left;" align="center">对于自己的C++项目，需要包含behaviac库的inc目录（该inc目录位于源码压缩包的最顶级）。例如，对于Visual Studio项目，inc目录配置如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1387" src="./../../../../../wp-content/uploads/2016/12/include_headers.png" alt="include_headers" width="718" height="582" srcset="./../../../../../wp-content/uploads/2016/12/include_headers.png 718w, ./../../../../../wp-content/uploads/2016/12/include_headers-300x243.png 300w" sizes="(max-width: 718px) 100vw, 718px" /></p>
<p>同时还需要包含编译behaviac生成的lib文件。例如，对于Visual Studio项目，behaviac lib文件配置如下图所示</p>
<p><img class="aligncenter size-full wp-image-1388" src="./../../../../../wp-content/uploads/2016/12/include_lib-1.png" alt="include_lib" width="722" height="589" srcset="./../../../../../wp-content/uploads/2016/12/include_lib-1.png 722w, ./../../../../../wp-content/uploads/2016/12/include_lib-1-300x245.png 300w" sizes="(max-width: 722px) 100vw, 722px" /></p>
<p>将编辑器生成的Agent子类的类型和相关的“胶水”代码都整合到自己的项目中，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1572" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_project.png" alt="" width="372" height="324" srcset="./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_project.png 372w, ./../../../../../wp-content/uploads/2016/12/tutorial_1_cpp_project-300x261.png 300w" sizes="(max-width: 372px) 100vw, 372px" /></p>
<p>在tutorial_1.cpp文件中，通过使用behaviac组件提供的API来体现行为树是如何加载和执行起来的。</p>
<p><strong>首先，在InitBehaviac()方法中初始化behaviac的加载目录和文件格式等，如下代码所示：</strong></p>
<pre>bool InitBehavic()
{
    LOGI("InitBehavic\n");

    behaviac::Workspace::GetInstance()-&gt;SetFilePath("../tutorials/tutorial_1/cpp/exported");

    behaviac::Workspace::GetInstance()-&gt;SetFileFormat(behaviac::Workspace::EFF_xml);

    return true;
}</pre>
<p>上面的几个接口说明如下：</p>
<ul>
<li>Workspace::SetFilePath()用于设置加载编辑器导出的行为树所在的目录。</li>
<li>Workspace::SetFileFormat()用于设置加载的行为树格式，这里用的是xml格式。</li>
</ul>
<p><strong>接着，创建Agent子类“FirstAgent”的实例，并加载指定的行为树，这里的行为树名字为“FirstBT”，如下代码所示：</strong></p>
<pre>bool InitPlayer()
{
    LOGI("InitPlayer\n");

    g_FirstAgent = behaviac::Agent::Create&lt;FirstAgent&gt;();

    bool bRet = g_FirstAgent-&gt;btload("FirstBT");

    g_FirstAgent-&gt;btsetcurrent("FirstBT");

    return bRet;
}</pre>
<p>上面的几个接口说明如下：</p>
<ul>
<li>Agent::Create()用于创建Agent子类的实例。</li>
<li>Agent::btload()用于加载行为树，入口参数是行为树的名字，不要加后缀。</li>
<li>Agent::btsetcurrent()用于指定当前准备执行的行为树。</li>
</ul>
<p><strong>其次，开始执行行为树，如下代码所示：</strong></p>
<pre>void UpdateLoop()
{
    LOGI("UpdateLoop\n");

    int frames = 0;
    behaviac::EBTStatus status = behaviac::BT_RUNNING;

    while (status == behaviac::BT_RUNNING)
    {
        LOGI("frame %d\n", ++frames);
        status = g_FirstAgent-&gt;btexec();
    }
}</pre>
<p>Agent::btexec()用于执行一次前面通过Agent::btsetcurrent()指定的行为树。</p>
<p>另外，如果不通过Agent::btexec()来单独执行行为树，也可以调用Workspace::Update()的方式来统一执行所有Agent实例的行为树，详见文章《<a href="./../../../../../tutorial13_updateloop/index.html">运行时端的执行流程</a>》。</p>
<p><strong>然后，对创建的Agent实例进行销毁释放，并清理整个工作区，如下代码所示：</strong></p>
<pre>void CleanupPlayer()
{
    LOGI("CleanupPlayer\n");

    behaviac::Agent::Destroy(g_FirstAgent);
}

void CleanupBehaviac()
{
    LOGI("CleanupBehaviac\n");

    behaviac::Workspace::GetInstance()-&gt;Cleanup();
}</pre>
<p><strong>最后，打开FirstAgent.cpp文件，并修改FirstAgent::SayHello()方法如下：</strong></p>
<pre>///&lt;&lt;&lt; THE METHOD HEAD
void FirstAgent::SayHello()
{
    ///&lt;&lt;&lt; BEGIN WRITING YOUR CODE
    printf("\nHello Behaviac!\n\n");
    ///&lt;&lt;&lt; END WRITING YOUR CODE
}</pre>
<p>注意：自己的代码需要添加在“///&lt;&lt;&lt; BEGIN WRITING YOUR CODE”和“///&lt;&lt;&lt; END WRITING YOUR CODE”之间，以便编辑器下次生成代码的时候，可以自动合并手工添加的内容和生成的内容。</p>
<p>编译并运行整个程序，执行结果如下：</p>
<p><img class="aligncenter size-full wp-image-1326" src="./../../../../../wp-content/uploads/2016/12/exec_result.png" alt="exec_result" width="128" height="182" /></p>
<p>可以看到，程序结果输出了“Hello Behaviac!”，也就是成功执行了我们创建的第一棵最简单的行为树，并成功执行了动作节点配置的成员方法“SayHello”。</p>
<p>下载源码包后，打开projects目录中的工程文件behaviac.sln（Windows平台）或make文件（Linux平台），编译并执行tutorial_1项目，就可以看到上图的结果。</p>
<h4><span class="ez-toc-section" id="C-2">纯C#版</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_3.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p style="text-align: left;" align="center">本教程纯C#版的工作区文件是安装包目录下的tutorials/tutorial_1/workspace/tutorial_1_cs.workspace.xml，相关参数配置如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1573" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_cs_workspace.png" alt="" width="587" height="272" srcset="./../../../../../wp-content/uploads/2016/12/tutorial_1_cs_workspace.png 587w, ./../../../../../wp-content/uploads/2016/12/tutorial_1_cs_workspace-300x139.png 300w" sizes="(max-width: 587px) 100vw, 587px" /></p>
<p>对于自己的C#项目，需要包含behaviac库的所有运行时源码（在源码包的<a href="https://github.com/Tencent/behaviac/tree/master/integration/unity/Assets/Scripts/behaviac/runtime">integration\unity\Assets\Scripts\behaviac\runtime</a>文件夹中）整合进来，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1574" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_cs_project.png" alt="" width="199" height="288" /></p>
<p>将编辑器生成的Agent子类的类型和相关的“胶水”代码都整合到自己的项目中，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1575" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_cs2_project.png" alt="" width="219" height="345" srcset="./../../../../../wp-content/uploads/2016/12/tutorial_1_cs2_project.png 219w, ./../../../../../wp-content/uploads/2016/12/tutorial_1_cs2_project-190x300.png 190w" sizes="(max-width: 219px) 100vw, 219px" /></p>
<p>为项目添加条件编译宏BEHAVIAC_NOT_USE_UNITY，表示用的是纯C#模式，没有使用Unity相关的API，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1446" src="./../../../../../wp-content/uploads/2016/12/cs_marco.png" alt="cs_marco" width="678" height="167" srcset="./../../../../../wp-content/uploads/2016/12/cs_marco.png 678w, ./../../../../../wp-content/uploads/2016/12/cs_marco-300x74.png 300w" sizes="(max-width: 678px) 100vw, 678px" /></p>
<p>在tutorial_1.cs文件中，通过使用behaviac组件提供的API来体现行为树是如何加载和执行起来的。</p>
<p><strong>首先，在InitBehaviac()方法中初始化behaviac的加载目录和文件格式等，如下代码所示：</strong></p>
<pre>static bool InitBehavic()
{
    Console.WriteLine("InitBehavic");

    behaviac.Workspace.Instance.FilePath = "../../exported";
    behaviac.Workspace.Instance.FileFormat = behaviac.Workspace.EFileFormat.EFF_xml;

    return true;
}</pre>
<p>上面的几个接口说明如下：</p>
<ul>
<li>Workspace.FilePath用于设置加载编辑器导出的行为树所在的目录。</li>
<li>Workspace.FileFormat用于设置加载的行为树格式，这里用的是xml格式。</li>
</ul>
<p><strong>接着，创建Agent子类“FirstAgent”的实例，并加载指定的行为树，这里的行为树名字为“FirstBT”，如下代码所示：</strong></p>
<pre>static bool InitPlayer()
{
    Console.WriteLine("InitPlayer");

    g_FirstAgent = new FirstAgent();

    bool bRet = g_FirstAgent.btload("FirstBT");
    Debug.Assert(bRet);

    g_FirstAgent.btsetcurrent("FirstBT");

    return bRet;
}</pre>
<p>上面的几个接口说明如下：</p>
<ul>
<li>Agent.btload()用于加载行为树，入口参数是行为树的名字，不要加后缀。</li>
<li>Agent.btsetcurrent()用于指定当前准备执行的行为树。</li>
</ul>
<p><strong>其次，开始执行行为树，如下代码所示：</strong></p>
<pre>static void UpdateLoop()
{
    Console.WriteLine("UpdateLoop");

    int frames = 0;
    behaviac.EBTStatus status = behaviac.EBTStatus.BT_RUNNING;

    while (status == behaviac.EBTStatus.BT_RUNNING)
    {
        Console.WriteLine("frame {0}", ++frames);

        status = g_FirstAgent.btexec();
    }
}</pre>
<p>Agent.btexec()用于执行一次前面通过Agent.btsetcurrent()指定的行为树。</p>
<p><strong>然后，对创建的Agent实例进行销毁释放，并清理整个工作区，如下代码所示：</strong></p>
<pre>static void CleanupPlayer()
{
    Console.WriteLine("CleanupPlayer");

    g_FirstAgent = null;
}

static void CleanupBehaviac()
{
    Console.WriteLine("CleanupBehaviac");

    behaviac.Workspace.Instance.Cleanup();
}</pre>
<p><strong>最后，打开FirstAgent.cs文件，并修改SayHello()方法如下：</strong></p>
<pre>///&lt;&lt;&lt; THE METHOD HEAD
public void SayHello()
{
    ///&lt;&lt;&lt; BEGIN WRITING YOUR CODE
    Console.WriteLine();
    Console.WriteLine("Hello Behaviac!");
    Console.WriteLine();
    ///&lt;&lt;&lt; END WRITING YOUR CODE
}</pre>
<p>注意：自己的代码需要添加在“///&lt;&lt;&lt; BEGIN WRITING YOUR CODE”和“///&lt;&lt;&lt; END WRITING YOUR CODE”之间，以便编辑器下次生成代码的时候，可以自动合并手工添加的内容和生成的内容。</p>
<p>编译并运行整个程序，执行结果如下：</p>
<p><img class="aligncenter size-full wp-image-1326" src="./../../../../../wp-content/uploads/2016/12/exec_result.png" alt="exec_result" width="128" height="182" /></p>
<p>可以看到，程序结果输出了“Hello Behaviac!”，也就是成功执行了我们创建的第一棵最简单的行为树，并成功执行了动作节点配置的成员方法“SayHello”。</p>
<p>下载源码包后，打开<a href="https://github.com/Tencent/behaviac/tree/master/tutorials/CsTutorials">tutorials/CsTutorials</a>目录中的工程文件<a id="12bd5ecb3f1c6dd4105af1cf9b665687-972df3316d1408803517f097a5db6f87b6f44981" class="js-navigation-open" title="CsTutorials.sln" href="https://github.com/Tencent/behaviac/blob/master/tutorials/CsTutorials/CsTutorials.sln">CsTutorials.sln</a>，编译并执行tutorial_1项目，就可以看到上图的结果。</p>
<h4><span class="ez-toc-section" id="Unity_C">Unity C#版</span></h4>
<p align="center"><video src="http://dlied5.qq.com/behaviac/tutorial_0_4.mp4" controls="controls" width="640" height="480"><br />
您的浏览器不支持 video 标签。<br />
</video></p>
<p style="text-align: left;" align="center">打开Unity编辑器创建一个空的Unity项目，保存该项目，或者直接打开安装目录下的tutorials/tutorial_1/unity目录中的项目。</p>
<p>通过behaviac编辑器创建一个工作区（或者直接打开安装包目录下的Unity工作区文件<a href="https://github.com/Tencent/behaviac/blob/master/tutorials/tutorial_1/workspace/tutorial_1_unity.workspace.xml">tutorials/tutorial_1/workspace/tutorial_1_unity.workspace.xml</a>），相关参数配置如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1576" src="./../../../../../wp-content/uploads/2016/12/tutorial_1_unity_workspace.png" alt="" width="587" height="272" srcset="./../../../../../wp-content/uploads/2016/12/tutorial_1_unity_workspace.png 587w, ./../../../../../wp-content/uploads/2016/12/tutorial_1_unity_workspace-300x139.png 300w" sizes="(max-width: 587px) 100vw, 587px" /></p>
<p>添加FirstAgent类及其成员方法SayHello()、创建和导出行为树FirstBT等流程跟上文相同。</p>
<p>导出整个工作区后，可以看到在目录<a href="https://github.com/Tencent/behaviac/tree/master/tutorials/tutorial_1/unity/Assets/Scripts/behaviac/behaviac_generated/types">tutorials\tutorial_1\unity\Assets\Scripts\behaviac\behaviac_generated\types</a>有了自动生成的源码文件，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1433" src="./../../../../../wp-content/uploads/2016/12/unity_export.png" alt="unity_export" width="273" height="201" /></p>
<p>在Unity编辑器中导入安装包目录下的behaviac运行时包integration/behaviac***.unitypackage。</p>
<p>打开整个项目的源码工程，可以看到有了behaviac的运行时库runtime和编辑器生成的源码behaviac_generated，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1434" src="./../../../../../wp-content/uploads/2016/12/unity_code.png" alt="unity_code" width="277" height="384" srcset="./../../../../../wp-content/uploads/2016/12/unity_code.png 277w, ./../../../../../wp-content/uploads/2016/12/unity_code-216x300.png 216w" sizes="(max-width: 277px) 100vw, 277px" /></p>
<p>打开FirstAgent.cs文件，添加代码如下：</p>
<p><strong>首先，在InitBehaviac()方法中初始化behaviac的加载目录和文件格式等，如下代码所示：</strong></p>
<pre>private static string ExportedFilePath
{
    get
    {
        string relativePath = "/Resources/behaviac/exported";

        if (Application.platform == RuntimePlatform.WindowsEditor) {
            return Application.dataPath + relativePath;
        }
        else if (Application.platform == RuntimePlatform.WindowsPlayer) {
            return Application.dataPath + relativePath;
        }
        else {
            return "Assets" + relativePath;
        }
    }
}

private bool InitBehavic()
{
    behaviac.Debug.LogWarning("InitBehavic");

    <strong>behaviac.Workspace.Instance.FilePath</strong> = ExportedFilePath;
    <strong>behaviac.Workspace.Instance.FileFormat</strong> = behaviac.Workspace.EFileFormat.EFF_xml;

    return true;
}</pre>
<p><strong>接着，加载指定的行为树，这里的行为树名字为“FirstBT”，如下代码所示：</strong></p>
<pre>private bool InitPlayer()
{
    behaviac.Debug.LogWarning("InitPlayer");

    bool bRet = this.btload("FirstBT");
    if (bRet)
    {
        this.btsetcurrent("FirstBT");
    }

    return bRet;
}</pre>
<p>在Awake()方法中调用InitBehavic和InitPlayer方法，如下代码所示：</p>
<pre>void Awake()
{
    InitBehavic();

    InitPlayer();
}</pre>
<p><strong>其次，在Update()方法中执行行为树，如下代码所示：</strong></p>
<pre>behaviac.EBTStatus _status = behaviac.EBTStatus.BT_RUNNING;

void Update()
{
    if (_status == behaviac.EBTStatus.BT_RUNNING)
    {
        behaviac.Debug.LogWarning("Update");

        _status = this.btexec();
     }
}</pre>
<p><strong>然后，修改SayHello()方法如下：</strong></p>
<pre>public void SayHello()
{
    ///&lt;&lt;&lt; BEGIN WRITING YOUR CODE SayHello
    behaviac.Debug.LogWarning("Hello Behaviac!");
    ///&lt;&lt;&lt; END WRITING YOUR CODE
}</pre>
<p>注意：自己的代码需要添加在“///&lt;&lt;&lt; BEGIN WRITING YOUR CODE”和“///&lt;&lt;&lt; END WRITING YOUR CODE”之间，以便编辑器下次生成代码的时候，可以自动合并手工添加的内容和生成的内容。</p>
<p>最后，在Unity编辑器中添加一个GameObject，并且为其添加脚本组件FirstAgent，如下图所示：</p>
<p><img class="aligncenter size-full wp-image-1435" src="./../../../../../wp-content/uploads/2016/12/unity_component.png" alt="unity_component" width="390" height="151" srcset="./../../../../../wp-content/uploads/2016/12/unity_component.png 390w, ./../../../../../wp-content/uploads/2016/12/unity_component-300x116.png 300w" sizes="(max-width: 390px) 100vw, 390px" /></p>
<p>在Unity编辑器中运行这个简单的程序，执行结果如下：</p>
<p><img class="aligncenter size-full wp-image-1436" src="./../../../../../wp-content/uploads/2016/12/unity_output.png" alt="unity_output" width="262" height="176" /></p>
<p>下载源码包后，通过Unity编辑器打开并运行<a href="https://github.com/Tencent/behaviac/blob/master/tutorials/tutorial_1/unity">tutorials/tutorial_1/unity</a>目录中的项目，就可以看到上图的结果。</p>
<p>本教程相关的工作区和代码工程详见源码包的目录<a href="https://github.com/Tencent/behaviac/blob/master/tutorials/tutorial_1">tutorials/tutorial_1</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../../../tutorial_1_hello_behaviac/feed/index.html</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
	</channel>
</rss>
